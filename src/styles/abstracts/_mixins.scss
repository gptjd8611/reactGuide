@use 'abstracts/functions' as func;
@use 'abstracts/variables' as var;
$icon-path: '/img/icon/';

// 아이콘 스타일 Mixin
@mixin icon($icon, $size: 24px, $color: #000) {
    width: $size;
    height: $size;
    fill: $color;
    background-image: url('#{$icon-path}#{$icon}.svg');
    background-size: 100% auto;
    background-repeat: no-repeat;
}

@mixin line-height($font-size, $font) {
    @if $font == $font-ggothic {
        @if $font-size == '14px' {
            line-height: var.ratio($font-size, 22px);
        }
    }
}

@mixin a11y-hidden($focus-visible: false, $focus-state-class: 'focus') {
    overflow: hidden;
    position: absolute;
    clip: rect(0, 0, 0, 0);
    clip-path: circle(0);
    width: 1px;
    height: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    white-space: nowrap;

    @if $focus-visible {
        &#{'--' + $focus-state-class}:focus {
            overflow: visible;
            position: static;
            clip: auto;
            width: auto;
            height: auto;
            margin: 0;
            white-space: normal;
        }
    }
}

@mixin color-set($font-color, $background-color, $border-color) {
    color: $font-color;
    background-color: $background-color;
    border-color: $border-color;
}

@mixin text-align($align) {
    text-align: $align;
}

@mixin debug($color: coral) {
    background-color: $color;
}

@mixin debug2($color: coral) {
    border: 1px solid $color;
}

@mixin clear-fix {
    &::before,
    &::after {
        content: '';
        display: table;
    }

    &::after {
        clear: both;
    }
}

@mixin background(
    $name,
    $repeat: no-repeat,
    $x: center,
    $y: top,
    $color: null
) {
    background: $color url($name) $repeat $x $y;
}

@mixin position(
    $position,
    $top: null,
    $right: null,
    $bottom: null,
    $left: null
) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

@mixin fixed($args...) {
    @include position(fixed, $args...);
}

@mixin absolute($args...) {
    @include position(absolute, $args...);
}

@mixin relative($args...) {
    @include position(relative, $args...);
}

@mixin vertical-center($position: absolute) {
    position: $position;
    top: 50%;
    transform: translateY(-50%);
}

@mixin size($w: null, $h: $w) {
    width: $w;
    height: $h;
}

@mixin size-half($w: null, $h: $w) {
    width: $w / 2;
    height: $h / 2;
}

@mixin ellipsis($line: 1) {
    overflow: hidden;
    text-overflow: ellipsis;

    @if ($line==1) {
        white-space: nowrap;
    } @else {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: $line;
    }
}

@mixin scrollbars(
    $size,
    $foreground-color,
    $background-color: mix($foreground-color, white, 50%)
) {
    // For Google Chrome
    &::-webkit-scrollbar {
        width: $size;
        height: $size;
    }

    &::-webkit-scrollbar-thumb {
        background: $foreground-color;
        border-radius: 10px;
        background-clip: padding-box;
        border: 1px solid transparent;
    }

    &::-webkit-scrollbar-track {
        background: $background-color;
        // box-shadow: inset 0px 0px 5px white;
        border-radius: 10px;
    }
}

@mixin respond-to($size) {
    @media (max-width: $size) {
        @content;
    }
}

/* NotoSans */
@mixin noto--m-12() {
    font-family: var.$font-noto;
    font-weight: 500;
    font-size: 1.2rem;
    line-height: 1.775rem;
}
@mixin noto--m-10() {
    font-family: var.$font-noto;
    font-weight: 500;
    font-size: 1rem;
}
@mixin noto--r-14() {
    font-family: var.$font-noto;
    font-weight: 400;
    font-size: 1.4rem;
    line-height: 2rem;
}

// label
// @mixin font-spoqa--label() {
//     font-family: var.$font-spoqa;
//     font-size: 1.2rem;
//     line-height: 2rem;
// }
// // badge
// @mixin font-spoqa--badge() {
//     font-family: var.$font-spoqa;
//     font-size: 1.1rem;
//     line-height: 1.6rem;
// }
